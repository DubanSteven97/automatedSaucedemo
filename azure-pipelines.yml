trigger:
- main

pool:
  vmImage: ubuntu-latest

steps:

- task: MavenAuthenticate@0
  inputs:
    artifactsFeeds: 'my-nuget-feed'

# Instalar dependencias base
- script: |
    sudo apt-get update
    sudo apt-get install -y unzip wget curl gnupg --no-install-recommends
  displayName: 'Install base dependencies'

# Instalar Google Chrome
- script: |
    sudo apt-get update
    sudo apt-get install -y libxss1 libappindicator1 libindicator7
    wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
    sudo apt install -y ./google-chrome-stable_current_amd64.deb
  displayName: 'Install Google Chrome'

# Instalar ChromeDriver
- script: |
    CHROME_DRIVER_VERSION=$(curl -sS https://chromedriver.storage.googleapis.com/LATEST_RELEASE)
    wget -N https://chromedriver.storage.googleapis.com/$CHROME_DRIVER_VERSION/chromedriver_linux64.zip
    unzip chromedriver_linux64.zip
    sudo mv chromedriver /usr/local/bin/chromedriver
    sudo chmod +x /usr/local/bin/chromedriver
  displayName: 'Install ChromeDriver'

# Instalar Firefox
- script: |
    sudo apt-get install -y --no-install-recommends firefox
  displayName: 'Install Firefox'

# Instalar GeckoDriver
- script: |
    GECKO_VERSION=$(curl -s https://api.github.com/repos/mozilla/geckodriver/releases/latest | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
    wget https://github.com/mozilla/geckodriver/releases/download/$GECKO_VERSION/geckodriver-$GECKO_VERSION-linux64.tar.gz
    tar -xzf geckodriver-$GECKO_VERSION-linux64.tar.gz
    sudo mv geckodriver /usr/local/bin/
    sudo chmod +x /usr/local/bin/geckodriver
  displayName: 'Install GeckoDriver'
  
- script: |
    google-chrome --version
    chromedriver --version
  displayName: 'Verify Chrome versions'
  
# Ejecutar pruebas Maven + Serenity
- task: Maven@3
  displayName: 'Build and Run Tests'
  inputs:
    mavenPomFile: 'pom.xml'
    mavenOptions: '-Xmx3072m'
    javaHomeOption: 'JDKVersion'
    jdkVersionOption: '1.17'
    jdkArchitectureOption: 'x64'
    publishJUnitResults: true
    testResultsFiles: '**/surefire-reports/TEST-*.xml'
    goals: 'clean verify'  # Solo ejecuta pruebas, sin generar el reporte aún

- task: Maven@3
  displayName: 'Generate Serenity Report'
  inputs:
    mavenPomFile: 'pom.xml'
    goals: 'serenity:aggregate'  # Genera el reporte HTML después
    options: '-DskipTests=true'  # Evita re-ejecutar pruebas
  condition: succeededOrFailed()  # Genera el reporte incluso si fallan las pruebas

# Publicar reporte Serenity (aunque falle la build)
- task: PublishBuildArtifacts@1
  condition: succeededOrFailed()
  inputs:
    PathtoPublish: 'target/site/serenity'
    ArtifactName: 'SerenityReport'
    publishLocation: 'Container'

# Final: limpiar procesos de navegador
- script: |
    pkill -f chrome || true
    pkill -f chromedriver || true
    pkill -f firefox || true
    pkill -f geckodriver || true
  displayName: 'Clean up browser processes'
  condition: always()
